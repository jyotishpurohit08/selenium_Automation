import tkinter as tk
from tkinter import ttk
import serial
import threading
from serial.tools import list_ports

class SerialTerminalApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Serial Terminal Emulator")

        # Create serial port configuration frame
        self.serial_frame = ttk.LabelFrame(root, text="Serial Port Configuration")
        self.serial_frame.grid(row=0, column=0, padx=10, pady=10, sticky="w")

        # Serial port settings
        self.com_port_label = ttk.Label(self.serial_frame, text="COM Port:")
        self.com_port_label.grid(row=0, column=0, sticky="w")

        # Populate available COM ports
        self.com_ports = [port.device for port in list_ports.comports()]
        self.com_port_entry = ttk.Combobox(self.serial_frame, values=self.com_ports)
        self.com_port_entry.grid(row=0, column=1)
        if self.com_ports:
            self.com_port_entry.set(self.com_ports[0])  # Set the first available port as default

        self.baud_rate_label = ttk.Label(self.serial_frame, text="Baud Rate:")
        self.baud_rate_label.grid(row=1, column=0, sticky="w")
        self.baud_rate_entry = ttk.Entry(self.serial_frame)
        self.baud_rate_entry.grid(row=1, column=1)
        self.baud_rate_entry.insert(0, "9600")

        self.connect_button = ttk.Button(self.serial_frame, text="Connect", command=self.connect_serial)
        self.connect_button.grid(row=2, columnspan=2)

        # Create entry for sending data
        self.send_entry = ttk.Entry(root, width=40)
        self.send_entry.grid(row=2, column=0, padx=10, pady=10, sticky="w")

        # Create a button for sending data
        self.send_button = ttk.Button(root, text="Send", command=self.send_data)
        self.send_button.grid(row=2, column=1, padx=10, pady=10, sticky="w")

        # Create text area for displaying received data
        self.text_area = tk.Text(root, wrap=tk.WORD, width=40, height=10)
        self.text_area.grid(row=3, column=0, columnspan=2, padx=10, pady=10, sticky="w")

        # Initialize serial port variable
        self.ser = None

    def connect_serial(self):
        com_port = self.com_port_entry.get()
        baud_rate = int(self.baud_rate_entry.get())

        try:
            self.ser = serial.Serial(com_port, baud_rate, timeout=1)
            self.start_serial_thread()
        except serial.SerialException as e:
            error_message = f"Failed to connect: {str(e)}"
            print(error_message)  # Print the error for debugging
            self.log_received_data(error_message)

    def start_serial_thread(self):
        # Start a thread to continuously read and display data from the serial port
        self.serial_thread = threading.Thread(target=self.read_serial_data)
        self.serial_thread.daemon = True
        self.serial_thread.start()

    def read_serial_data(self):
        while True:
            if self.ser:
                data = self.ser.read(1)
                if data:
                    data_str = data.decode('utf-8', errors='ignore')
                    self.log_received_data(data_str)

    def send_data(self):
        data = self.send_entry.get()
        if self.ser:
            self.ser.write(data.encode())
        self.send_entry.delete(0, tk.END)

    def log_received_data(self, data):
        self.text_area.insert(tk.END, data)
        self.text_area.see(tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = SerialTerminalApp(root)
    root.mainloop()
